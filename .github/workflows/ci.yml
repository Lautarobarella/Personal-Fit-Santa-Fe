name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job para el Backend (Java/Spring Boot)
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: 'maven'

    - name: Cache Maven packages
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Run Backend Tests
      working-directory: ./Backend
      run: |
        mvn clean test -Dspring.profiles.active=test
        mvn jacoco:report

    - name: Upload Backend Test Coverage
      uses: codecov/codecov-action@v4
      with:
        file: ./Backend/target/site/jacoco/jacoco.xml
        flags: backend
        name: backend-coverage

  # Job para el Frontend (Next.js/TypeScript)
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: Frontend/package-lock.json

    - name: Install Frontend dependencies
      working-directory: ./Frontend
      run: npm ci

    - name: Run Frontend linting
      working-directory: ./Frontend
      run: npm run lint

    - name: Run Frontend tests
      working-directory: ./Frontend
      run: npm test

    - name: Upload Frontend Test Coverage
      uses: codecov/codecov-action@v4
      if: hashFiles('Frontend/coverage/lcov.info') != ''
      with:
        file: ./Frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  # Job para construir y testear Docker
  docker-build:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Backend Docker image
      run: |
        docker build -f Backend/Dockerfile -t personalfit-backend:test .
        docker images | grep personalfit-backend

    - name: Test Docker Compose
      run: |
        docker compose -f docker-compose.yml config
        docker compose -f docker-compose.yml build

  # Job para deployment (solo en main)
  deploy:
    name: Deploy to Hostinger VPS
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, docker-build]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to Hostinger VPS
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: ${{ secrets.SSH_PORT }}
        envs: MP_ACCESS_TOKEN,NEXT_PUBLIC_MP_PUBLIC_KEY
        script: |
          # Exportar variables de entorno para Docker Compose
          export MP_ACCESS_TOKEN="${{ secrets.MP_ACCESS_TOKEN }}"
          export NEXT_PUBLIC_MP_PUBLIC_KEY="${{ secrets.NEXT_PUBLIC_MP_PUBLIC_KEY }}"
          
          # Navegar al directorio del proyecto en /opt
          cd /opt
          
          # Si el directorio no existe, clonarlo
          if [ ! -d "Personal-Fit-Santa-Fe" ]; then
            git clone https://github.com/${{ github.repository }}.git Personal-Fit-Santa-Fe
          fi
          
          cd Personal-Fit-Santa-Fe
          
          # Hacer backup de cambios locales si los hay
          if ! git diff-index --quiet HEAD --; then
            git stash push -m "Backup before deployment $(date '+%Y%m%d_%H%M%S')"
          fi
          
          # Actualizar c√≥digo
          git fetch origin
          git checkout main
          git pull origin main
          
          # Hacer el deployment
          chmod +x deploy.sh
          ./deploy.sh 
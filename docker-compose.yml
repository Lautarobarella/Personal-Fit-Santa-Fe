version: '3.8'

networks:
  personalfit-network:
    driver: bridge
    name: personalfit-network

services:
  postgres:
    image: postgres:15
    container_name: personalfit-db
    restart: unless-stopped
    networks:
      - personalfit-network
    environment:
      POSTGRES_DB: personalfit
      POSTGRES_USER: personalfit_user
      POSTGRES_PASSWORD: secret123
    volumes:
      # Volumen persistente para la base de datos - los datos se conservan entre deployments
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  personalfit-backend:
    build:
      context: .
      dockerfile: Backend/Dockerfile
    container_name: personalfit-backend
    restart: unless-stopped
    networks:
      - personalfit-network
    depends_on:
      - postgres
    environment:
      SPRING_DATASOURCE_FILES_PATH: /opt/backups/comprobantes  # Comentado para desarrollo local
      #SPRING_DATASOURCE_FILES_PATH: /app/uploads/comprobantes
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/personalfit
      SPRING_DATASOURCE_USERNAME: personalfit_user
      SPRING_DATASOURCE_PASSWORD: secret123
      # Configuración de conexión de base de datos
      SPRING_DATASOURCE_HIKARI_MAXIMUM_POOL_SIZE: 5
      SPRING_DATASOURCE_HIKARI_MINIMUM_IDLE: 2
      # Configuración de Spring Boot
      SPRING_PROFILES_ACTIVE: production  # Comentado para desarrollo local
      #SPRING_PROFILES_ACTIVE: development
      # Secretos para el backend
      JWT_SECRET: ${JWT_SECRET}
      
      # Firebase Configuration for Push Notifications
      # Firebase config is now read from mounted file at /opt/firebase/firebase-service-account.json
      
      MP_ACCESS_TOKEN: ${MP_ACCESS_TOKEN}
      WEBHOOK_SECRET: ${WEBHOOK_SECRET}
    ports:
      - "8080:8080"
    volumes:
      # Mapeo directo al directorio local de la máquina host (comentado para desarrollo local)
      - /opt/backups/comprobantes:/opt/backups/comprobantes
      # Directorio Firebase para la configuración de service account
      - /opt/firebase:/opt/firebase:ro
      # Volumen local para desarrollo
      
      # - uploads_data:/app/uploads/comprobantes

  personalfit-frontend:
    build:
      context: .
      dockerfile: Frontend/Dockerfile
      args:
        NEXT_PUBLIC_API_BASE_URL: https://personalfitsantafe.com
        NEXT_PUBLIC_MP_PUBLIC_KEY: ${NEXT_PUBLIC_MP_PUBLIC_KEY}
        NEXT_PUBLIC_MP_ENVIRONMENT: sandbox
        NEXT_PUBLIC_IS_DOCKER: "true"
        # Firebase Configuration
        NEXT_PUBLIC_FIREBASE_API_KEY: ${NEXT_PUBLIC_FIREBASE_API_KEY}
        NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN: ${NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN}
        NEXT_PUBLIC_FIREBASE_PROJECT_ID: ${NEXT_PUBLIC_FIREBASE_PROJECT_ID}
        NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET: ${NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET}
        NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID: ${NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID}
        NEXT_PUBLIC_FIREBASE_APP_ID: ${NEXT_PUBLIC_FIREBASE_APP_ID}
        NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID: ${NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID}
        NEXT_PUBLIC_FIREBASE_VAPID_KEY: ${NEXT_PUBLIC_FIREBASE_VAPID_KEY}
    container_name: personalfit-frontend
    restart: unless-stopped
    networks:
      - personalfit-network
    depends_on:
      - personalfit-backend
    ports:
      - "3000:3000"
    environment:
      # Variables para el runtime (aunque las NEXT_PUBLIC ya están compiladas)
      JWT_SECRET: ${JWT_SECRET}
      MP_ACCESS_TOKEN: ${MP_ACCESS_TOKEN}
      WEBHOOK_SECRET: ${WEBHOOK_SECRET}
      
      # Configuración de Next.js
      NODE_ENV: production

  pgadmin:
    image: dpage/pgadmin4
    container_name: personalfit-pgadmin
    restart: unless-stopped
    networks:
      - personalfit-network
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@personalfit.com
      PGADMIN_DEFAULT_PASSWORD: admin123
    depends_on:
      - postgres

volumes:
  # Volúmenes persistentes que conservan los datos entre deployments
  pgdata:
  # Datos de PostgreSQL
  uploads_data:
    # Archivos de comprobantes de pago para desarrollo local